generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modelo de usuário integrado com Clerk
model User {
  id                String    @id @default(cuid())
  clerkId           String    @unique
  email             String    @unique
  name              String?
  avatar            String?
  phone             String?
  
  // Verificação de identidade
  biNumber          String?   @unique
  biVerified        Boolean   @default(false)
  verified          Boolean   @default(false) // Todas as verificações concluídas
  
  // Reputação
  reputacao         Float     @default(0)
  totalAvaliacoes   Int       @default(0)
  
  // Timestamps
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relações
  ofertas           Oferta[]
  propostas         Proposta[]
  transacoesComprador Transacao[] @relation("TransacaoComprador")
  transacoesVendedor  Transacao[] @relation("TransacaoVendedor")
  avaliacoesFeitas  Avaliacao[] @relation("AvaliacaoAvaliador")
  avaliacoesRecebidas Avaliacao[] @relation("AvaliacaoAvaliado")
  mensagens         Mensagem[]
  verificacao       Verificacao?
  
  @@map("users")
}

// Verificações detalhadas do usuário
model Verificacao {
  id                String    @id @default(cuid())
  userId            String    @unique
  
  // Verificação de BI
  biVerified        Boolean   @default(false)
  biVerifiedAt      DateTime?
  extractedData     Json?     // Dados extraídos do OCR
  
  // Verificação facial
  faceVerified      Boolean   @default(false)
  faceVerifiedAt    DateTime?
  faceId            String?   @unique
  fioToken          String?
  faceData          Json?
  
  // Verificação de telefone
  phoneVerified     Boolean   @default(false)
  phoneVerifiedAt   DateTime?
  phoneNumber       String?
  
  // Timestamps
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relações
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("verificacoes")
}

// Modelo de oferta
model Oferta {
  id              String     @id @default(cuid())
  tipo            TipoOferta // COMPRA ou VENDA
  moedaOrigem     String     // USD, EUR, AOA, etc
  moedaDestino    String     // USD, EUR, AOA, etc
  valorMinimo     Float
  valorMaximo     Float
  taxa            Float      // Taxa de câmbio
  metodoPagamento String[]   // Array de métodos aceitos
  localizacao     String?
  observacoes     String?
  ativo           Boolean    @default(true)
  
  // Timestamps
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  expiresAt       DateTime?
  
  // Relações
  user            User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  propostas       Proposta[]
  
  @@map("ofertas")
}

// Modelo de proposta
model Proposta {
  id              String         @id @default(cuid())
  valor           Float
  metodoPagamento String
  mensagem        String?
  mensagemResposta String?
  status          StatusProposta @default(PENDENTE)
  respondidaEm    DateTime?
  
  // Timestamps
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  
  // Relações
  oferta          Oferta         @relation(fields: [ofertaId], references: [id], onDelete: Cascade)
  ofertaId        String
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  transacao       Transacao?
  
  @@map("propostas")
}

// Modelo de transação
model Transacao {
  id                String            @id @default(cuid())
  valor             Float
  moedaOrigem       String
  moedaDestino      String
  taxa              Float
  metodoPagamento   String
  status            StatusTransacao   @default(AGUARDANDO_PAGAMENTO)
  comprovante       String?
  observacoes       String?
  concluidaEm       DateTime?
  
  // Timestamps
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  
  // Relações
  proposta          Proposta          @relation(fields: [propostaId], references: [id], onDelete: Cascade)
  propostaId        String            @unique
  
  comprador         User              @relation("TransacaoComprador", fields: [compradorId], references: [id])
  compradorId       String
  
  vendedor          User              @relation("TransacaoVendedor", fields: [vendedorId], references: [id])
  vendedorId        String
  
  mensagens         Mensagem[]
  verificacoesPagamento VerificacaoPagamento[]
  avaliacoes        Avaliacao[]
  
  @@map("transacoes")
}

// Mensagens do chat
model Mensagem {
  id          String      @id @default(cuid())
  mensagem    String
  anexo       String?     // URL de arquivo anexado
  tipo        TipoMensagem @default(USUARIO)
  
  // Timestamps
  createdAt   DateTime    @default(now())
  
  // Relações
  transacao   Transacao   @relation(fields: [transacaoId], references: [id], onDelete: Cascade)
  transacaoId String
  
  usuario     User        @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  usuarioId   String
  
  @@map("mensagens")
}

// Verificações de pagamento
model VerificacaoPagamento {
  id                      String    @id @default(cuid())
  comprovanteUrl          String
  numeroReferencia        String
  metodoPagamento         String
  valor                   Float
  observacoes             String?
  observacoesVendedor     String?
  verificadoAutomaticamente Boolean @default(false)
  dadosVerificacao        Json?     // Dados da API externa
  status                  StatusVerificacao @default(PENDENTE)
  verificadoEm            DateTime?
  erroVerificacao         String?
  
  // Timestamps
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  
  // Relações
  transacao               Transacao @relation(fields: [transacaoId], references: [id], onDelete: Cascade)
  transacaoId             String
  
  @@map("verificacoes_pagamento")
}

// Modelo de avaliação
model Avaliacao {
  id          String   @id @default(cuid())
  rating      Int      // 1-5 estrelas
  comentario  String
  
  // Timestamps
  createdAt   DateTime @default(now())
  
  // Relações
  transacao   Transacao @relation(fields: [transacaoId], references: [id], onDelete: Cascade)
  transacaoId String
  
  avaliador   User     @relation("AvaliacaoAvaliador", fields: [avaliadorId], references: [id], onDelete: Cascade)
  avaliadorId String
  
  avaliado    User     @relation("AvaliacaoAvaliado", fields: [avaliadoId], references: [id], onDelete: Cascade)
  avaliadoId  String
  
  @@unique([transacaoId, avaliadorId])
  @@map("avaliacoes")
}

// Enums
enum TipoOferta {
  COMPRA
  VENDA
}

enum StatusProposta {
  PENDENTE
  ACEITA
  REJEITADA
}

enum StatusTransacao {
  AGUARDANDO_PAGAMENTO
  PAGAMENTO_ENVIADO
  PAGAMENTO_CONFIRMADO
  CONCLUIDA
  CANCELADA
}

enum TipoMensagem {
  USUARIO
  SISTEMA
}

enum StatusVerificacao {
  PENDENTE
  VERIFICADO
  REJEITADO
}
